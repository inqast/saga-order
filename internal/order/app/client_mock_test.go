package app

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/inqast/saga-order/internal/order/app.Client -o ./client_mock_test.go -n ClientMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/inqast/saga-order/internal/models"
)

// ClientMock implements Client
type ClientMock struct {
	t minimock.Tester

	funcGetCartItemsByUserId          func(ctx context.Context, id int) (ppa1 []*models.Product, err error)
	inspectFuncGetCartItemsByUserId   func(ctx context.Context, id int)
	afterGetCartItemsByUserIdCounter  uint64
	beforeGetCartItemsByUserIdCounter uint64
	GetCartItemsByUserIdMock          mClientMockGetCartItemsByUserId
}

// NewClientMock returns a mock for Client
func NewClientMock(t minimock.Tester) *ClientMock {
	m := &ClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCartItemsByUserIdMock = mClientMockGetCartItemsByUserId{mock: m}
	m.GetCartItemsByUserIdMock.callArgs = []*ClientMockGetCartItemsByUserIdParams{}

	return m
}

type mClientMockGetCartItemsByUserId struct {
	mock               *ClientMock
	defaultExpectation *ClientMockGetCartItemsByUserIdExpectation
	expectations       []*ClientMockGetCartItemsByUserIdExpectation

	callArgs []*ClientMockGetCartItemsByUserIdParams
	mutex    sync.RWMutex
}

// ClientMockGetCartItemsByUserIdExpectation specifies expectation struct of the Client.GetCartItemsByUserId
type ClientMockGetCartItemsByUserIdExpectation struct {
	mock    *ClientMock
	params  *ClientMockGetCartItemsByUserIdParams
	results *ClientMockGetCartItemsByUserIdResults
	Counter uint64
}

// ClientMockGetCartItemsByUserIdParams contains parameters of the Client.GetCartItemsByUserId
type ClientMockGetCartItemsByUserIdParams struct {
	ctx context.Context
	id  int
}

// ClientMockGetCartItemsByUserIdResults contains results of the Client.GetCartItemsByUserId
type ClientMockGetCartItemsByUserIdResults struct {
	ppa1 []*models.Product
	err  error
}

// Expect sets up expected params for Client.GetCartItemsByUserId
func (mmGetCartItemsByUserId *mClientMockGetCartItemsByUserId) Expect(ctx context.Context, id int) *mClientMockGetCartItemsByUserId {
	if mmGetCartItemsByUserId.mock.funcGetCartItemsByUserId != nil {
		mmGetCartItemsByUserId.mock.t.Fatalf("ClientMock.GetCartItemsByUserId mock is already set by Set")
	}

	if mmGetCartItemsByUserId.defaultExpectation == nil {
		mmGetCartItemsByUserId.defaultExpectation = &ClientMockGetCartItemsByUserIdExpectation{}
	}

	mmGetCartItemsByUserId.defaultExpectation.params = &ClientMockGetCartItemsByUserIdParams{ctx, id}
	for _, e := range mmGetCartItemsByUserId.expectations {
		if minimock.Equal(e.params, mmGetCartItemsByUserId.defaultExpectation.params) {
			mmGetCartItemsByUserId.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCartItemsByUserId.defaultExpectation.params)
		}
	}

	return mmGetCartItemsByUserId
}

// Inspect accepts an inspector function that has same arguments as the Client.GetCartItemsByUserId
func (mmGetCartItemsByUserId *mClientMockGetCartItemsByUserId) Inspect(f func(ctx context.Context, id int)) *mClientMockGetCartItemsByUserId {
	if mmGetCartItemsByUserId.mock.inspectFuncGetCartItemsByUserId != nil {
		mmGetCartItemsByUserId.mock.t.Fatalf("Inspect function is already set for ClientMock.GetCartItemsByUserId")
	}

	mmGetCartItemsByUserId.mock.inspectFuncGetCartItemsByUserId = f

	return mmGetCartItemsByUserId
}

// Return sets up results that will be returned by Client.GetCartItemsByUserId
func (mmGetCartItemsByUserId *mClientMockGetCartItemsByUserId) Return(ppa1 []*models.Product, err error) *ClientMock {
	if mmGetCartItemsByUserId.mock.funcGetCartItemsByUserId != nil {
		mmGetCartItemsByUserId.mock.t.Fatalf("ClientMock.GetCartItemsByUserId mock is already set by Set")
	}

	if mmGetCartItemsByUserId.defaultExpectation == nil {
		mmGetCartItemsByUserId.defaultExpectation = &ClientMockGetCartItemsByUserIdExpectation{mock: mmGetCartItemsByUserId.mock}
	}
	mmGetCartItemsByUserId.defaultExpectation.results = &ClientMockGetCartItemsByUserIdResults{ppa1, err}
	return mmGetCartItemsByUserId.mock
}

//Set uses given function f to mock the Client.GetCartItemsByUserId method
func (mmGetCartItemsByUserId *mClientMockGetCartItemsByUserId) Set(f func(ctx context.Context, id int) (ppa1 []*models.Product, err error)) *ClientMock {
	if mmGetCartItemsByUserId.defaultExpectation != nil {
		mmGetCartItemsByUserId.mock.t.Fatalf("Default expectation is already set for the Client.GetCartItemsByUserId method")
	}

	if len(mmGetCartItemsByUserId.expectations) > 0 {
		mmGetCartItemsByUserId.mock.t.Fatalf("Some expectations are already set for the Client.GetCartItemsByUserId method")
	}

	mmGetCartItemsByUserId.mock.funcGetCartItemsByUserId = f
	return mmGetCartItemsByUserId.mock
}

// When sets expectation for the Client.GetCartItemsByUserId which will trigger the result defined by the following
// Then helper
func (mmGetCartItemsByUserId *mClientMockGetCartItemsByUserId) When(ctx context.Context, id int) *ClientMockGetCartItemsByUserIdExpectation {
	if mmGetCartItemsByUserId.mock.funcGetCartItemsByUserId != nil {
		mmGetCartItemsByUserId.mock.t.Fatalf("ClientMock.GetCartItemsByUserId mock is already set by Set")
	}

	expectation := &ClientMockGetCartItemsByUserIdExpectation{
		mock:   mmGetCartItemsByUserId.mock,
		params: &ClientMockGetCartItemsByUserIdParams{ctx, id},
	}
	mmGetCartItemsByUserId.expectations = append(mmGetCartItemsByUserId.expectations, expectation)
	return expectation
}

// Then sets up Client.GetCartItemsByUserId return parameters for the expectation previously defined by the When method
func (e *ClientMockGetCartItemsByUserIdExpectation) Then(ppa1 []*models.Product, err error) *ClientMock {
	e.results = &ClientMockGetCartItemsByUserIdResults{ppa1, err}
	return e.mock
}

// GetCartItemsByUserId implements Client
func (mmGetCartItemsByUserId *ClientMock) GetCartItemsByUserId(ctx context.Context, id int) (ppa1 []*models.Product, err error) {
	mm_atomic.AddUint64(&mmGetCartItemsByUserId.beforeGetCartItemsByUserIdCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCartItemsByUserId.afterGetCartItemsByUserIdCounter, 1)

	if mmGetCartItemsByUserId.inspectFuncGetCartItemsByUserId != nil {
		mmGetCartItemsByUserId.inspectFuncGetCartItemsByUserId(ctx, id)
	}

	mm_params := &ClientMockGetCartItemsByUserIdParams{ctx, id}

	// Record call args
	mmGetCartItemsByUserId.GetCartItemsByUserIdMock.mutex.Lock()
	mmGetCartItemsByUserId.GetCartItemsByUserIdMock.callArgs = append(mmGetCartItemsByUserId.GetCartItemsByUserIdMock.callArgs, mm_params)
	mmGetCartItemsByUserId.GetCartItemsByUserIdMock.mutex.Unlock()

	for _, e := range mmGetCartItemsByUserId.GetCartItemsByUserIdMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ppa1, e.results.err
		}
	}

	if mmGetCartItemsByUserId.GetCartItemsByUserIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCartItemsByUserId.GetCartItemsByUserIdMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCartItemsByUserId.GetCartItemsByUserIdMock.defaultExpectation.params
		mm_got := ClientMockGetCartItemsByUserIdParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCartItemsByUserId.t.Errorf("ClientMock.GetCartItemsByUserId got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCartItemsByUserId.GetCartItemsByUserIdMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCartItemsByUserId.t.Fatal("No results are set for the ClientMock.GetCartItemsByUserId")
		}
		return (*mm_results).ppa1, (*mm_results).err
	}
	if mmGetCartItemsByUserId.funcGetCartItemsByUserId != nil {
		return mmGetCartItemsByUserId.funcGetCartItemsByUserId(ctx, id)
	}
	mmGetCartItemsByUserId.t.Fatalf("Unexpected call to ClientMock.GetCartItemsByUserId. %v %v", ctx, id)
	return
}

// GetCartItemsByUserIdAfterCounter returns a count of finished ClientMock.GetCartItemsByUserId invocations
func (mmGetCartItemsByUserId *ClientMock) GetCartItemsByUserIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCartItemsByUserId.afterGetCartItemsByUserIdCounter)
}

// GetCartItemsByUserIdBeforeCounter returns a count of ClientMock.GetCartItemsByUserId invocations
func (mmGetCartItemsByUserId *ClientMock) GetCartItemsByUserIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCartItemsByUserId.beforeGetCartItemsByUserIdCounter)
}

// Calls returns a list of arguments used in each call to ClientMock.GetCartItemsByUserId.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCartItemsByUserId *mClientMockGetCartItemsByUserId) Calls() []*ClientMockGetCartItemsByUserIdParams {
	mmGetCartItemsByUserId.mutex.RLock()

	argCopy := make([]*ClientMockGetCartItemsByUserIdParams, len(mmGetCartItemsByUserId.callArgs))
	copy(argCopy, mmGetCartItemsByUserId.callArgs)

	mmGetCartItemsByUserId.mutex.RUnlock()

	return argCopy
}

// MinimockGetCartItemsByUserIdDone returns true if the count of the GetCartItemsByUserId invocations corresponds
// the number of defined expectations
func (m *ClientMock) MinimockGetCartItemsByUserIdDone() bool {
	for _, e := range m.GetCartItemsByUserIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartItemsByUserIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCartItemsByUserIdCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCartItemsByUserId != nil && mm_atomic.LoadUint64(&m.afterGetCartItemsByUserIdCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCartItemsByUserIdInspect logs each unmet expectation
func (m *ClientMock) MinimockGetCartItemsByUserIdInspect() {
	for _, e := range m.GetCartItemsByUserIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ClientMock.GetCartItemsByUserId with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartItemsByUserIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCartItemsByUserIdCounter) < 1 {
		if m.GetCartItemsByUserIdMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ClientMock.GetCartItemsByUserId")
		} else {
			m.t.Errorf("Expected call to ClientMock.GetCartItemsByUserId with params: %#v", *m.GetCartItemsByUserIdMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCartItemsByUserId != nil && mm_atomic.LoadUint64(&m.afterGetCartItemsByUserIdCounter) < 1 {
		m.t.Error("Expected call to ClientMock.GetCartItemsByUserId")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetCartItemsByUserIdInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCartItemsByUserIdDone()
}
