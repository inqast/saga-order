package app

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/inqast/saga-order/internal/reserve/app.Repository -o ./repository_mock_test.go -n RepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/inqast/saga-order/internal/models"
)

// RepositoryMock implements Repository
type RepositoryMock struct {
	t minimock.Tester

	funcGetReservesByOrderId          func(ctx context.Context, i1 int) (rpa1 []*models.Reserve, err error)
	inspectFuncGetReservesByOrderId   func(ctx context.Context, i1 int)
	afterGetReservesByOrderIdCounter  uint64
	beforeGetReservesByOrderIdCounter uint64
	GetReservesByOrderIdMock          mRepositoryMockGetReservesByOrderId
}

// NewRepositoryMock returns a mock for Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetReservesByOrderIdMock = mRepositoryMockGetReservesByOrderId{mock: m}
	m.GetReservesByOrderIdMock.callArgs = []*RepositoryMockGetReservesByOrderIdParams{}

	return m
}

type mRepositoryMockGetReservesByOrderId struct {
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetReservesByOrderIdExpectation
	expectations       []*RepositoryMockGetReservesByOrderIdExpectation

	callArgs []*RepositoryMockGetReservesByOrderIdParams
	mutex    sync.RWMutex
}

// RepositoryMockGetReservesByOrderIdExpectation specifies expectation struct of the Repository.GetReservesByOrderId
type RepositoryMockGetReservesByOrderIdExpectation struct {
	mock    *RepositoryMock
	params  *RepositoryMockGetReservesByOrderIdParams
	results *RepositoryMockGetReservesByOrderIdResults
	Counter uint64
}

// RepositoryMockGetReservesByOrderIdParams contains parameters of the Repository.GetReservesByOrderId
type RepositoryMockGetReservesByOrderIdParams struct {
	ctx context.Context
	i1  int
}

// RepositoryMockGetReservesByOrderIdResults contains results of the Repository.GetReservesByOrderId
type RepositoryMockGetReservesByOrderIdResults struct {
	rpa1 []*models.Reserve
	err  error
}

// Expect sets up expected params for Repository.GetReservesByOrderId
func (mmGetReservesByOrderId *mRepositoryMockGetReservesByOrderId) Expect(ctx context.Context, i1 int) *mRepositoryMockGetReservesByOrderId {
	if mmGetReservesByOrderId.mock.funcGetReservesByOrderId != nil {
		mmGetReservesByOrderId.mock.t.Fatalf("RepositoryMock.GetReservesByOrderId mock is already set by Set")
	}

	if mmGetReservesByOrderId.defaultExpectation == nil {
		mmGetReservesByOrderId.defaultExpectation = &RepositoryMockGetReservesByOrderIdExpectation{}
	}

	mmGetReservesByOrderId.defaultExpectation.params = &RepositoryMockGetReservesByOrderIdParams{ctx, i1}
	for _, e := range mmGetReservesByOrderId.expectations {
		if minimock.Equal(e.params, mmGetReservesByOrderId.defaultExpectation.params) {
			mmGetReservesByOrderId.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetReservesByOrderId.defaultExpectation.params)
		}
	}

	return mmGetReservesByOrderId
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetReservesByOrderId
func (mmGetReservesByOrderId *mRepositoryMockGetReservesByOrderId) Inspect(f func(ctx context.Context, i1 int)) *mRepositoryMockGetReservesByOrderId {
	if mmGetReservesByOrderId.mock.inspectFuncGetReservesByOrderId != nil {
		mmGetReservesByOrderId.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetReservesByOrderId")
	}

	mmGetReservesByOrderId.mock.inspectFuncGetReservesByOrderId = f

	return mmGetReservesByOrderId
}

// Return sets up results that will be returned by Repository.GetReservesByOrderId
func (mmGetReservesByOrderId *mRepositoryMockGetReservesByOrderId) Return(rpa1 []*models.Reserve, err error) *RepositoryMock {
	if mmGetReservesByOrderId.mock.funcGetReservesByOrderId != nil {
		mmGetReservesByOrderId.mock.t.Fatalf("RepositoryMock.GetReservesByOrderId mock is already set by Set")
	}

	if mmGetReservesByOrderId.defaultExpectation == nil {
		mmGetReservesByOrderId.defaultExpectation = &RepositoryMockGetReservesByOrderIdExpectation{mock: mmGetReservesByOrderId.mock}
	}
	mmGetReservesByOrderId.defaultExpectation.results = &RepositoryMockGetReservesByOrderIdResults{rpa1, err}
	return mmGetReservesByOrderId.mock
}

//Set uses given function f to mock the Repository.GetReservesByOrderId method
func (mmGetReservesByOrderId *mRepositoryMockGetReservesByOrderId) Set(f func(ctx context.Context, i1 int) (rpa1 []*models.Reserve, err error)) *RepositoryMock {
	if mmGetReservesByOrderId.defaultExpectation != nil {
		mmGetReservesByOrderId.mock.t.Fatalf("Default expectation is already set for the Repository.GetReservesByOrderId method")
	}

	if len(mmGetReservesByOrderId.expectations) > 0 {
		mmGetReservesByOrderId.mock.t.Fatalf("Some expectations are already set for the Repository.GetReservesByOrderId method")
	}

	mmGetReservesByOrderId.mock.funcGetReservesByOrderId = f
	return mmGetReservesByOrderId.mock
}

// When sets expectation for the Repository.GetReservesByOrderId which will trigger the result defined by the following
// Then helper
func (mmGetReservesByOrderId *mRepositoryMockGetReservesByOrderId) When(ctx context.Context, i1 int) *RepositoryMockGetReservesByOrderIdExpectation {
	if mmGetReservesByOrderId.mock.funcGetReservesByOrderId != nil {
		mmGetReservesByOrderId.mock.t.Fatalf("RepositoryMock.GetReservesByOrderId mock is already set by Set")
	}

	expectation := &RepositoryMockGetReservesByOrderIdExpectation{
		mock:   mmGetReservesByOrderId.mock,
		params: &RepositoryMockGetReservesByOrderIdParams{ctx, i1},
	}
	mmGetReservesByOrderId.expectations = append(mmGetReservesByOrderId.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetReservesByOrderId return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetReservesByOrderIdExpectation) Then(rpa1 []*models.Reserve, err error) *RepositoryMock {
	e.results = &RepositoryMockGetReservesByOrderIdResults{rpa1, err}
	return e.mock
}

// GetReservesByOrderId implements Repository
func (mmGetReservesByOrderId *RepositoryMock) GetReservesByOrderId(ctx context.Context, i1 int) (rpa1 []*models.Reserve, err error) {
	mm_atomic.AddUint64(&mmGetReservesByOrderId.beforeGetReservesByOrderIdCounter, 1)
	defer mm_atomic.AddUint64(&mmGetReservesByOrderId.afterGetReservesByOrderIdCounter, 1)

	if mmGetReservesByOrderId.inspectFuncGetReservesByOrderId != nil {
		mmGetReservesByOrderId.inspectFuncGetReservesByOrderId(ctx, i1)
	}

	mm_params := &RepositoryMockGetReservesByOrderIdParams{ctx, i1}

	// Record call args
	mmGetReservesByOrderId.GetReservesByOrderIdMock.mutex.Lock()
	mmGetReservesByOrderId.GetReservesByOrderIdMock.callArgs = append(mmGetReservesByOrderId.GetReservesByOrderIdMock.callArgs, mm_params)
	mmGetReservesByOrderId.GetReservesByOrderIdMock.mutex.Unlock()

	for _, e := range mmGetReservesByOrderId.GetReservesByOrderIdMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rpa1, e.results.err
		}
	}

	if mmGetReservesByOrderId.GetReservesByOrderIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetReservesByOrderId.GetReservesByOrderIdMock.defaultExpectation.Counter, 1)
		mm_want := mmGetReservesByOrderId.GetReservesByOrderIdMock.defaultExpectation.params
		mm_got := RepositoryMockGetReservesByOrderIdParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetReservesByOrderId.t.Errorf("RepositoryMock.GetReservesByOrderId got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetReservesByOrderId.GetReservesByOrderIdMock.defaultExpectation.results
		if mm_results == nil {
			mmGetReservesByOrderId.t.Fatal("No results are set for the RepositoryMock.GetReservesByOrderId")
		}
		return (*mm_results).rpa1, (*mm_results).err
	}
	if mmGetReservesByOrderId.funcGetReservesByOrderId != nil {
		return mmGetReservesByOrderId.funcGetReservesByOrderId(ctx, i1)
	}
	mmGetReservesByOrderId.t.Fatalf("Unexpected call to RepositoryMock.GetReservesByOrderId. %v %v", ctx, i1)
	return
}

// GetReservesByOrderIdAfterCounter returns a count of finished RepositoryMock.GetReservesByOrderId invocations
func (mmGetReservesByOrderId *RepositoryMock) GetReservesByOrderIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReservesByOrderId.afterGetReservesByOrderIdCounter)
}

// GetReservesByOrderIdBeforeCounter returns a count of RepositoryMock.GetReservesByOrderId invocations
func (mmGetReservesByOrderId *RepositoryMock) GetReservesByOrderIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReservesByOrderId.beforeGetReservesByOrderIdCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetReservesByOrderId.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetReservesByOrderId *mRepositoryMockGetReservesByOrderId) Calls() []*RepositoryMockGetReservesByOrderIdParams {
	mmGetReservesByOrderId.mutex.RLock()

	argCopy := make([]*RepositoryMockGetReservesByOrderIdParams, len(mmGetReservesByOrderId.callArgs))
	copy(argCopy, mmGetReservesByOrderId.callArgs)

	mmGetReservesByOrderId.mutex.RUnlock()

	return argCopy
}

// MinimockGetReservesByOrderIdDone returns true if the count of the GetReservesByOrderId invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetReservesByOrderIdDone() bool {
	for _, e := range m.GetReservesByOrderIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReservesByOrderIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReservesByOrderIdCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReservesByOrderId != nil && mm_atomic.LoadUint64(&m.afterGetReservesByOrderIdCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetReservesByOrderIdInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetReservesByOrderIdInspect() {
	for _, e := range m.GetReservesByOrderIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetReservesByOrderId with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReservesByOrderIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReservesByOrderIdCounter) < 1 {
		if m.GetReservesByOrderIdMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.GetReservesByOrderId")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetReservesByOrderId with params: %#v", *m.GetReservesByOrderIdMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReservesByOrderId != nil && mm_atomic.LoadUint64(&m.afterGetReservesByOrderIdCounter) < 1 {
		m.t.Error("Expected call to RepositoryMock.GetReservesByOrderId")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetReservesByOrderIdInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetReservesByOrderIdDone()
}
